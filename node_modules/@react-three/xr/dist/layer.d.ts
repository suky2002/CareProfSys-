import { XRLayerEntry, XRLayerOptions, XRLayerProperties as XRLayerDynamicProperties, XRLayerSrc } from '@pmndrs/xr';
import { MeshProps, RootState } from '@react-three/fiber';
import { MutableRefObject, ReactNode } from 'react';
import { BufferGeometry, Mesh, WebGLRenderTarget } from 'three';
import { StoreApi } from 'zustand';
export type XRLayerProperties = XRLayerOptions & XRLayerDynamicProperties & Omit<MeshProps, 'geometry'> & {
    renderPriority?: number;
    children?: ReactNode;
    pixelWidth?: number;
    pixelHeight?: number;
    dpr?: number;
    src?: Exclude<XRLayerSrc, WebGLRenderTarget>;
};
export declare function XRLayer({ src, pixelWidth, pixelHeight, dpr, renderPriority, children, ...props }: XRLayerProperties): import("react/jsx-runtime").JSX.Element | null;
export declare const XRLayerImplementation: import("react").ForwardRefExoticComponent<Omit<Omit<XRLayerProperties, "src"> & {
    src?: Exclude<XRLayerSrc, WebGLRenderTarget>;
    geometry?: BufferGeometry;
    pixelWidth: number;
    pixelHeight: number;
    dpr: number;
    renderTargetRef: MutableRefObject<WebGLRenderTarget | undefined>;
    layerEntryRef: MutableRefObject<XRLayerEntry | undefined>;
}, "ref"> & import("react").RefAttributes<Mesh<BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>>>;
export declare const FallbackXRLayerImplementation: import("react").ForwardRefExoticComponent<Omit<Omit<XRLayerProperties, "src"> & {
    src?: Exclude<XRLayerSrc, WebGLRenderTarget>;
    geometry?: BufferGeometry;
    pixelWidth: number;
    pixelHeight: number;
    dpr: number;
    renderTargetRef: MutableRefObject<WebGLRenderTarget | undefined>;
}, "ref"> & import("react").RefAttributes<Mesh<BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>>>;
export declare const privateKeys: string[];
export declare function useLayerStore(width: number, height: number, dpr: number): {
    (): RootState & {
        setPreviousState: (prevState: RootState) => void;
    };
    <U>(selector: (state: RootState & {
        setPreviousState: (prevState: RootState) => void;
    }) => U): U;
    <U>(selector: (state: RootState & {
        setPreviousState: (prevState: RootState) => void;
    }) => U, equalityFn: (a: U, b: U) => boolean): U;
} & StoreApi<RootState & {
    setPreviousState: (prevState: RootState) => void;
}> & {
    setState(state: Partial<RootState>): void;
};
