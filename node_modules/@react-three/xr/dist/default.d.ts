import { DefaultXRInputSourceGrabPointerOptions, DefaultXRInputSourceRayPointerOptions, DefaultXRControllerOptions, DefaultXRGazeOptions, DefaultXRHandOptions, DefaultXRHandTouchPointerOptions, DefaultXRScreenInputOptions, DefaultXRTransientPointerOptions, DefaultXRInputSourceTeleportPointerOptions } from '@pmndrs/xr/internals';
export { type DefaultXRControllerOptions, type DefaultXRGazeOptions, type DefaultXRHandOptions, type DefaultXRHandTouchPointerOptions, type DefaultXRInputSourceGrabPointerOptions, type DefaultXRInputSourceRayPointerOptions, type DefaultXRScreenInputOptions, type DefaultXRTransientPointerOptions, defaultGrabPointerOpacity, defaultRayPointerOpacity, defaultTouchPointerOpacity, } from '@pmndrs/xr/internals';
/**
 * grab pointer for the XRHand
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `makeDefault` used the set the default pointer inside a combined pointer
 * - `cursorModel` properties for configuring how the cursor should look
 * - `radius` the size of the intersection sphere
 */
export declare const DefaultXRHandGrabPointer: (options: DefaultXRInputSourceGrabPointerOptions) => import("react/jsx-runtime").JSX.Element;
/**
 * grab pointer for the XRController
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `makeDefault` used the set the default pointer inside a combined pointer
 * - `cursorModel` properties for configuring how the cursor should look
 * - `radius` the size of the intersection sphere
 */
export declare const DefaultXRControllerGrabPointer: (options: DefaultXRInputSourceGrabPointerOptions) => import("react/jsx-runtime").JSX.Element;
/**
 * ray pointer for the XRInputSource
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `makeDefault` used the set the default pointer inside a combined pointer
 * - `radius` the size of the intersection sphere
 * - `minDistance` minimal distance to trigger interactions
 * - `linePoints` the points thay make up the shape of the ray if undefined the ray goes in a straight line
 * - `direction` the direction of the ray
 * - `rayModel` properties for configuring how the ray should look
 * - `cursorModel` properties for configuring how the cursor should look
 */
export declare function DefaultXRInputSourceRayPointer(options: DefaultXRInputSourceRayPointerOptions): import("react/jsx-runtime").JSX.Element;
/**
 * touch pointer for the XRHand
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `makeDefault` used the set the default pointer inside a combined pointer
 * - `cursorModel` properties for configuring how the cursor should look
 * - `hoverRadius` the size of the intersection sphere
 * - `downRadius` the distance to the touch center to trigger a pointerdown event
 * - `button` the id of the button that is triggered when touching
 */
export declare function DefaultXRHandTouchPointer(options: DefaultXRHandTouchPointerOptions): import("react/jsx-runtime").JSX.Element;
/**
 * default controller implementation with grab and ray pointers
 *
 * properties
 * - `model` options for configuring the controller apperance
 * - `grabPointer` options for configuring the grab pointer
 * - `rayPointer` options for configuring the ray pointer
 */
export declare function DefaultXRController(options: DefaultXRControllerOptions): import("react/jsx-runtime").JSX.Element;
/**
 * default hand implementation with touch, grab and ray pointers
 *
 * properties
 * - `model` options for configuring the hand appearance
 * - `grabPointer` options for configuring the grab pointer
 * - `rayPointer` options for configuring the ray pointer
 * - `touchPointer` options for configuring the touch pointer
 */
export declare function DefaultXRHand(options: DefaultXRHandOptions): import("react/jsx-runtime").JSX.Element;
/**
 * default transient-pointer implementation with ray pointer
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `minDistance` minimal distance to trigger interactions
 * - `linePoints` the points thay make up the shape of the ray if undefined the ray goes in a straight line
 * - `direction` the direction of the ray
 * - `cursorModel` properties for configuring how the cursor should look
 */
export declare function DefaultXRTransientPointer(options: DefaultXRTransientPointerOptions): import("react/jsx-runtime").JSX.Element;
/**
 * default gaze implementation with ray pointer
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `minDistance` minimal distance to trigger interactions
 * - `linePoints` the points thay make up the shape of the ray if undefined the ray goes in a straight line
 * - `direction` the direction of the ray
 * - `cursorModel` properties for configuring how the cursor should look
 */
export declare function DefaultXRGaze(options: DefaultXRGazeOptions): import("react/jsx-runtime").JSX.Element;
/**
 * default screen-input implementation with ray pointer
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `minDistance` minimal distance to trigger interactions
 * - `linePoints` the points thay make up the shape of the ray if undefined the ray goes in a straight line
 * - `direction` the direction of the ray
 */
export declare function DefaultXRScreenInput(options: DefaultXRScreenInputOptions): import("react/jsx-runtime").JSX.Element;
/**
 * telport pointer for the XRInputSource
 * emits a downwards bend ray that only interesects with meshes marked as teleportable
 *
 * properties
 * - `clickThesholdMs` time in milliseconds between pointerdown and pointerup to trigger a click event
 * - `dblClickThresholdMs` time in milliseconds between the first click and the second click to trigger a dblclick event
 * - `contextMenuButton` the button that triggers contextmenu events
 * - `makeDefault` used the set the default pointer inside a combined pointer
 * - `radius` the size of the intersection sphere
 * - `minDistance` minimal distance to trigger interactions
 * - `direction` the direction of the ray
 * - `rayModel` properties for configuring how the ray should look
 * - `cursorModel` properties for configuring how the cursor should look
 */
export declare function DefaultXRInputSourceTeleportPointer(options: DefaultXRInputSourceTeleportPointerOptions): import("react/jsx-runtime").JSX.Element;
