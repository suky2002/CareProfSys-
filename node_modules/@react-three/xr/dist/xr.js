import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createXRStore as createXRStoreImpl, } from '@pmndrs/xr/internals';
import { useFrame, useThree, useStore as useRootStore } from '@react-three/fiber';
import { useContext, useEffect, useMemo } from 'react';
import { useStore } from 'zustand';
import { combinedPointerContext, xrContext } from './contexts.js';
import { XRElements } from './elements.js';
import { setupSyncIsVisible } from '@pmndrs/xr';
import { CombinedPointer } from '@pmndrs/pointer-events';
/**
 * starting point for each XR application
 * allows to configure the session's features and defaults such as what controllers are rendered and how they can interact with the scene
 * @returns an xr store
 */
export function createXRStore(options) {
    return createXRStoreImpl(options);
}
/**
 * core XR component for connectin the xr store with the scene
 * requires the xr store which it will provide to its children
 */
export function XR({ children, store }) {
    store.setWebXRManager(useThree((s) => s.gl.xr));
    const rootStore = useRootStore();
    useEffect(() => {
        let initialCamera;
        return store.subscribe((state, prevState) => {
            if (state.session === prevState.session) {
                return;
            }
            //session has changed
            if (state.session != null) {
                const { camera, gl } = rootStore.getState();
                initialCamera = camera;
                rootStore.setState({ camera: gl.xr.getCamera() });
                return;
            }
            if (initialCamera == null) {
                //we always were in xr?
                return;
            }
            rootStore.setState({ camera: initialCamera });
        });
    }, [rootStore, store]);
    useFrame((state, _delta, frame) => store.onBeforeFrame(state.scene, state.camera, frame), -1000);
    useFrame(() => store.onBeforeRender());
    return (_jsx(xrContext.Provider, { value: store, children: _jsxs(RootCombinedPointer, { children: [_jsx(XRElements, {}), children] }) }));
}
export function RootCombinedPointer({ children }) {
    const store = useXRStore();
    const pointer = useMemo(() => new CombinedPointer(true), []);
    useEffect(() => setupSyncIsVisible(store, (visible) => pointer.setEnabled(visible, { timeStamp: performance.now() })), [store, pointer]);
    useFrame((state) => pointer.move(state.scene, { timeStamp: performance.now() }), -50);
    return _jsx(combinedPointerContext.Provider, { value: pointer, children: children });
}
/**
 * hook for getting the xr store from the context
 */
export function useXRStore() {
    const store = useContext(xrContext);
    if (store == null) {
        throw new Error(`XR features can only be used inside the <XR> component`);
    }
    return store;
}
/**
 * hook for reading the state from the xr store
 */
export function useXR(selector = (state) => state, equalityFn) {
    return useStore(useXRStore(), selector, equalityFn);
}
