import { DefaultXRControllerOptions, DefaultXRGazeOptions, DefaultXRHandOptions, DefaultXRScreenInputOptions, DefaultXRTransientPointerOptions, XRState as BaseXRState, XRStore as BaseXRStore, XRStoreOptions as BaseXRStoreOptions } from '@pmndrs/xr/internals';
import { ComponentType, ReactNode } from 'react';
type XRElementImplementation = {
    /**
     * @default true
     */
    hand: ComponentType | boolean | DefaultXRHandOptions;
    /**
     * @default true
     */
    controller: ComponentType | boolean | DefaultXRControllerOptions;
    /**
     * @default true
     */
    transientPointer: ComponentType | boolean | DefaultXRTransientPointerOptions;
    /**
     * @default true
     */
    gaze: ComponentType | boolean | DefaultXRGazeOptions;
    /**
     * @default true
     */
    screenInput: ComponentType | boolean | DefaultXRScreenInputOptions;
    /**
     * @default false
     */
    detectedMesh: ComponentType | false;
    /**
     * @default false
     */
    detectedPlane: ComponentType | false;
};
export type XRStore = BaseXRStore<XRElementImplementation>;
export type XRStoreOptions = BaseXRStoreOptions<XRElementImplementation>;
export type XRState = BaseXRState<XRElementImplementation>;
/**
 * starting point for each XR application
 * allows to configure the session's features and defaults such as what controllers are rendered and how they can interact with the scene
 * @returns an xr store
 */
export declare function createXRStore(options?: XRStoreOptions): BaseXRStore<XRElementImplementation>;
export type XRProperties = {
    children?: ReactNode;
    store: XRStore;
};
/**
 * core XR component for connectin the xr store with the scene
 * requires the xr store which it will provide to its children
 */
export declare function XR({ children, store }: XRProperties): import("react/jsx-runtime").JSX.Element;
export declare function RootCombinedPointer({ children }: {
    children?: ReactNode;
}): import("react/jsx-runtime").JSX.Element;
/**
 * hook for getting the xr store from the context
 */
export declare function useXRStore(): XRStore;
/**
 * hook for reading the state from the xr store
 */
export declare function useXR<T = XRState>(selector?: (s: XRState) => T, equalityFn?: (a: T, b: T) => boolean): T;
export {};
