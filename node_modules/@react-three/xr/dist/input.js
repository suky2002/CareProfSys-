import { bindXRInputSourceEvent, } from '@pmndrs/xr/internals';
import { useXR } from './xr.js';
import { xrInputSourceStateContext } from './contexts.js';
import { useContext, useEffect } from 'react';
export function useXRInputSourceStates() {
    return useXR((xr) => xr.inputSourceStates);
}
export function useXRInputSourceState(type, handedness) {
    return useXR((s) => s.inputSourceStates.find((state) => state.type === type && (handedness == null || state.inputSource.handedness === handedness)));
}
export function useXRInputSourceStateContext(type) {
    const state = useContext(xrInputSourceStateContext);
    if (state == null) {
        throw new Error(`useXRInputSourceStateContext() can only be used inside the xr store config`);
    }
    if (type != null && state.type != type) {
        throw new Error(`useXRInputSourceStateContext(${type}) can not be used inside a component for input type "${state.type}"`);
    }
    return state;
}
/**
 * hook for listening to xr input source events
 */
export function useXRInputSourceEvent(inputSource, event, fn, deps) {
    const session = useXR((xr) => xr.session);
    useEffect(() => {
        if (session == null || inputSource == null) {
            return;
        }
        return bindXRInputSourceEvent(session, inputSource, event, fn);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [event, inputSource, session, ...deps]);
}
