import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { isFacingCamera } from '@pmndrs/xr';
import { useFrame, useThree } from '@react-three/fiber';
import { useRef, useState } from 'react';
function useIsFacingCamera(ref, set, direction, angle) {
    const camera = useThree((state) => state.camera);
    useFrame(() => {
        if (ref.current == null) {
            return;
        }
        set(isFacingCamera(camera, ref.current, direction, angle));
    });
}
/**
 * guard that only shows its shildren if the camera towards the object based on the provided angle and direction
 */
export function ShowIfFacingCamera({ children, direction, angle = Math.PI / 2, }) {
    const ref = useRef(null);
    useIsFacingCamera(ref, (visible) => {
        if (ref.current == null) {
            return;
        }
        ref.current.visible = visible;
    }, direction, angle);
    return _jsx("group", { ref: ref, children: children });
}
/**
 * guard that only renders its shildren if the camera towards the object based on the provided angle and direction
 */
export function IfFacingCamera({ children, direction, angle = Math.PI / 2, }) {
    const ref = useRef(null);
    const [show, setShow] = useState(false);
    useIsFacingCamera(ref, setShow, direction, angle);
    return show ? _jsx(_Fragment, { children: children }) : null;
}
