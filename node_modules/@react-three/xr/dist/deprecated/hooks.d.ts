import { RefObject } from 'react';
import { Group, Intersection, XRControllerEventType as ThreeXRControllerEventType } from 'three';
import { PointerEvent } from '@pmndrs/pointer-events';
import { XRControllerState, XRGazeState, XRHandState, XRScreenInputState, XRTransientPointerState } from '@pmndrs/xr';
import { useXRSpace } from '../space.js';
declare const eventTranslations: {
    onBlur: string;
    onHover: string;
    onMove: string;
    onSelect: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSelectEnd: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSelectStart: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSqueeze: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSqueezeEnd: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSqueezeStart: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
};
/**
 * @deprecated use normal react-three/fiber event listeners instead (e.g. <mesh onClick={...} />)
 */
export declare function useInteraction(ref: RefObject<Group>, type: keyof typeof eventTranslations, handler?: (event: {
    intersection: Intersection;
    intersections: Array<Intersection>;
    target: any;
}) => void): void;
/**
 * @deprecated
 */
export declare function useXREvent(type: Exclude<ThreeXRControllerEventType, XRSessionEventType | 'connected' | 'disconnected'>, handler: (event: {
    type: Exclude<ThreeXRControllerEventType, XRSessionEventType | 'connected' | 'disconnected'>;
    data: XRInputSource;
}) => void, { handedness }?: {
    handedness?: XRHandedness;
}): void;
/**
 * @deprecated use `useXRInputSourceState("transientPointer", "left")` instead
 * hook for getting the transient-pointer state
 * @param handedness the handedness that the XRHandState should have
 */
export declare function useXRTransientPointerState(handedness: XRHandedness): XRTransientPointerState | undefined;
/**
 * @deprecated use `useXRInputSourceStateContext("transientPointer")` instead
 * hook for getting the transient-pointer state inside the xr store config
 */
export declare function useXRTransientPointerState(): XRTransientPointerState;
/**
 * @deprecated use `useXRInputSourceStateContext("gaze")` instead
 * hook for getting the gaze state
 */
export declare function useXRGazeState(): XRGazeState;
/**
 * @deprecated `useXRInputSourceStateContext("screenInput")` instead
 * hook for getting the screen-input state
 */
export declare function useXRScreenInputState(): XRScreenInputState;
/**
 * @deprecated use `useXRInputSourceState("hand", "left")` instead
 * hook for getting the XRHandState
 * @param handedness the handedness that the XRHandState should have
 */
export declare function useXRHandState(handedness: XRHandedness): XRHandState | undefined;
/**
 * @deprecated `useXRInputSourceStateContext("hand")` instead
 * hook for getting the XRHandState
 */
export declare function useXRHandState(): XRHandState;
/**
 * @deprecated use `useXRInputSourceState("controller", "left")` instead
 * hook for getting the XRControllerState
 * @param handedness the handedness that the XRControllerState should have
 */
export declare function useXRControllerState(handedness: XRHandedness): XRControllerState | undefined;
/**
 * @deprecated `useXRInputSourceStateContext("controller")` instead
 * hook for getting the XRControllerState
 */
export declare function useXRControllerState(): XRControllerState;
/**
 * @deprecated use useXRSpace instead
 */
export declare const useXRReferenceSpace: typeof useXRSpace;
export {};
