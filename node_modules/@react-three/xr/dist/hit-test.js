import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';
import { createXRHitTestSource, requestXRHitTest } from '@pmndrs/xr';
import { useXRStore } from './xr.js';
import { useFrame } from '@react-three/fiber';
export { createXRHitTestSource, requestXRHitTest } from '@pmndrs/xr';
/**
 * hook for creating a hit test source originating from the provided object or xrspace
 */
export function useXRHitTestSource(relativeTo, trackableType) {
    const [source, setState] = useState();
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useCreateXRHitTestSource(relativeTo, trackableType, setState);
    return source;
}
/**
 * hook for setting up a continous hit test originating from the provided object or xrspace
 */
export function useXRHitTest(fn, relativeTo, trackableType) {
    const sourceRef = useRef(undefined);
    useCreateXRHitTestSource(relativeTo, trackableType, useCallback((source) => (sourceRef.current = source), []));
    useFrame((_s, _d, frame) => {
        if (fn == null || frame == null || sourceRef.current == null) {
            return;
        }
        fn(frame.getHitTestResults(sourceRef.current.source), sourceRef.current.getWorldMatrix);
    });
}
function useCreateXRHitTestSource(relativeTo, trackableType, onLoad) {
    const store = useXRStore();
    useEffect(() => {
        let storedResult;
        let cancelled = false;
        const relativeToResolved = relativeTo instanceof XRSpace || typeof relativeTo === 'string' ? relativeTo : relativeTo?.current;
        if (relativeToResolved == null) {
            return;
        }
        createXRHitTestSource(store, relativeToResolved, trackableType).then((result) => {
            if (cancelled) {
                return;
            }
            storedResult = result;
            onLoad(result);
        });
        return () => {
            onLoad(undefined);
            cancelled = true;
            storedResult?.source.cancel();
        };
    }, [store, relativeTo, trackableType, onLoad]);
}
/**
 * hook that returns a function to request a single hit test
 */
export function useXRRequestHitTest() {
    const store = useXRStore();
    return useCallback((relativeTo, trackableType) => {
        const relativeToResolved = relativeTo instanceof XRSpace || typeof relativeTo === 'string' ? relativeTo : relativeTo.current;
        if (relativeToResolved == null) {
            return;
        }
        return requestXRHitTest(store, relativeToResolved, trackableType);
    }, [store]);
}
/**
 * component for getting hit tests originating based on its position in the scene graph
 */
export const XRHitTest = forwardRef(({ trackableType, onResults, space, ...rest }, ref) => {
    const internalRef = useRef(null);
    useImperativeHandle(ref, () => internalRef.current);
    useXRHitTest(onResults, space ?? internalRef, trackableType);
    return _jsx("group", { ...rest, ref: internalRef });
});
