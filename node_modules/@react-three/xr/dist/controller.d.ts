import { ReactNode } from 'react';
import { XRControllerGamepadComponentId, XRControllerGamepadComponentState, XRControllerLayout, XRControllerLayoutLoaderOptions, XRControllerModelOptions, XRControllerState } from '@pmndrs/xr/internals';
import { Object3D } from 'three';
/**
 * component for placing content in the controller anchored at a specific component such as the Thumbstick
 *
 * properties
 * - `id` is the id of the component (e.g. `"a-button"`)
 * - `onPress` is an optional callback to receive when the component is pressed
 * - `onRelease` is an optional callback to receive when the component is released
 *
 * the component allows children to be placed inside for e.g. visualizing a tooltip over the button/...
 */
export declare const XRControllerComponent: import("react").ForwardRefExoticComponent<{
    onPress?: () => void;
    onRelease?: () => void;
    id: XRControllerGamepadComponentId;
    children?: ReactNode;
} & import("react").RefAttributes<Object3D<import("three").Object3DEventMap> | undefined>>;
/**
 * hook for subscribing to a button state change event on the controller
 * @param id of the button
 * @param onChange callback that gets executed when the state of the button changes
 * @param handedness of the controller
 */
export declare function useXRControllerButtonEvent(controller: XRControllerState, id: XRControllerGamepadComponentId, onChange: (state: XRControllerGamepadComponentState['state']) => void): void;
export type { XRControllerState, XRControllerModelOptions };
/**
 * component for rendering a 3D model for the XRController
 *
 * properties
 * - `colorWrite`
 * - `renderOrder`
 */
export declare const XRControllerModel: import("react").ForwardRefExoticComponent<XRControllerModelOptions & import("react").RefAttributes<Object3D<import("three").Object3DEventMap>>>;
export declare function useLoadXRControllerLayout(profileIds: string[], handedness: XRHandedness, { baseAssetPath, defaultControllerProfileId }?: XRControllerLayoutLoaderOptions): XRControllerLayout;
export declare function useLoadXRControllerModel(layout: XRControllerLayout): import("three").Group<import("three").Object3DEventMap>;
